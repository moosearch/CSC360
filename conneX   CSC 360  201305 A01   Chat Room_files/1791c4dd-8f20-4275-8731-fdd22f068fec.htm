<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Chat Room</title>
<link href="conneX%20%20%20CSC%20360%20%20201305%20A01%20%20%20Chat%20Room_files/tool_base.css" type="text/css" rel="stylesheet" media="all">
<link href="conneX%20%20%20CSC%20360%20%20201305%20A01%20%20%20Chat%20Room_files/tool.css" type="text/css" rel="stylesheet" media="all">
<script type="text/javascript" language="JavaScript" src="conneX%20%20%20CSC%20360%20%20201305%20A01%20%20%20Chat%20Room_files/headscripts.js"></script>
<script type="text/javascript" language="JavaScript">var sakai = sakai || {}; sakai.editor = sakai.editor || {}; 
sakai.editor.collectionId = '/group/56ea8ff6-127b-4c7e-aeb0-f1617998af8a/';
sakai.editor.enableResourceSearch = false;</script>
<script type="text/javascript" language="JavaScript">var CKEDITOR_BASEPATH='/library/editor/ckeditor/';
</script>
<script type="text/javascript" language="JavaScript" src="1791c4dd-8f20-4275-8731-fdd22f068fec_data/ckeditor_002.js"></script>
<script type="text/javascript" language="JavaScript" src="1791c4dd-8f20-4275-8731-fdd22f068fec_data/ckeditor.js"></script>
</head>
<body onpageshow='event.persisted &amp;&amp; (function(){var allInstances = CKEDITOR.instances, editor, doc;for ( var i in allInstances ){	editor = allInstances[ i ];	doc = editor.document;	if ( doc )	{		doc.$.designMode = "off";		doc.$.designMode = "on";	}}})();' onload="setMainFrameHeight('Main1791c4ddx8f20x4275x8731xfdd22f068fec');setFocus(focus_path);">
<div class="portletBody">

     <script type="text/javascript">
	focus_path = ["controlPanel:message"];
    doubleDeep = true;
</script>
<script type="text/javascript" language="JavaScript" src="conneX%20%20%20CSC%20360%20%20201305%20A01%20%20%20Chat%20Room_files/headscripts.js"></script>
<script src="conneX%20%20%20CSC%20360%20%20201305%20A01%20%20%20Chat%20Room_files/jquery.js" type="text/javascript"></script>
<script src="1791c4dd-8f20-4275-8731-fdd22f068fec_data/chatscript.js" type="text/javascript"></script>
<script type="text/javascript">
	window.frameElement.className='wcwmenu';
</script>
<form id="topForm" method="post" action="https://connex.csc.uvic.ca/portal/tool/1791c4dd-8f20-4275-8731-fdd22f068fec/room" enctype="application/x-www-form-urlencoded">

      <input id="topForm:chatidhidden" name="topForm:chatidhidden" value="2495b0b7-82a1-423d-af24-852ef608bba9" type="hidden">

         
            
               
            
            
               
            
            
                
            
         
            	
         <h3 class="insColor insBak insBorder">Currently viewing messages for 'Main Chat Room'</h3>
			
				 
					
					
						
						
						
						
						
					 
					
					
					   	
					
					      				      
				 
			<table class="navPanel" border="0">
<tbody>
<tr>
<td class="viewNav"><label for="topForm:viewOptions">
View</label><select id="topForm:viewOptions" name="topForm:viewOptions" size="1" onchange="this.form.submit();">	<option value="1">Time Only</option>
	<option value="3" selected="selected">Date and Time</option>
	<option value="2">Date Only</option>
	<option value="0">Neither Date nor Time</option>
	<option value="4">ID Only</option>
</select><label for="topForm:messageOptions">
View messages from...</label><select id="topForm:messageOptions" name="topForm:messageOptions" size="1" onchange="this.form.submit();">	<option value="-1" selected="selected">All Messages</option>
	<option value="1">Last 10 messages</option>
	<option value="0">Past 3 days</option>
	<option value="2">Show no message history</option>
</select></td>
</tr>
</tbody>
</table>
 
			<div id="chatListWrapper" class="chatListWrapper">
				<div class="chatListHeadWrapper">
					All chat messages are archived and can be read by any site participant.
					
						
					
					
						
					
					
				</div>
                <div id="chat2_messages_shown_total" class="shown_total">Showing 98 messages out of 98</div>
<script type="text/javascript">
var chat2_totalMessages = 98;
var chat2_shownMessages = chat2_totalMessages;
var chat2_messageCountTemplate = "Showing *SHOWN* messages out of *TOTAL*"; // replace *SHOWN* and *TOTAL*
</script>
				
				<div id="Monitor" class="chatListMonitor">
					
	

	

    
    <ul id="topForm:chatList" class="chatList">
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 6, 2013 2:06 PM PDT)</span> 
	  

	  

	  

	  Feel free to post any questions here.

	  </li>
    
    
	  <li><span style="color: blue">Jesper Rage</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 8, 2013 6:25 PM PDT)</span> 
	  

	  

	  

	  does any one have any Idea on what to do

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 8, 2013 6:30 PM PDT)</span> 
	  

	  

	  

	  Nope, still trying to figure that out

	  </li>
    
    
	  <li><span style="color: orange">Dennis Honey</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 8, 2013 6:39 PM PDT)</span> 
	  

	  

	  

	  Nope

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 8, 2013 7:55 PM PDT)</span> 
	  

	  

	  

	  ...Nope...

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 9, 2013 8:43 AM PDT)</span> 
	  

	  

	  

	  If you are talking about the assignment 1, then please come to the tutorial tomorrow. I will explain what you need to do.

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 16, 2013 1:57 PM PDT)</span> 
	  

	  

	  

	  I have been thinking about this as a possible answer:<br>
The CPU instruction needed is fetch_and_add.<br>
1: User enters update value<br>
2: App calls fetch_and_add();<br>
3: App gets new correct flower count

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 16, 2013 2:22 PM PDT)</span> 
	  

	  

	  

	  nevermind...I see why this is wrong

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 16, 2013 4:52 PM PDT)</span> 
	  

	  

	  

	  The spinlock is a solution. See <a target="_new_" href="http://en.wikipedia.org/wiki/Spinlock.">http://en.wikipedia.org/wiki/Spinlock.</a>  You need a special instruction to do the atomic swap.

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 18, 2013 3:20 PM PDT)</span> 
	  

	  

	  

	  Are we supposed to always get 30000 for both s1 and s2 on part (b)? 
The LockRace.bin in the 'soln' folder does not reflect that

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 19, 2013 2:01 PM PDT)</span> 
	  

	  

	  

	  Yes, using spinlocks, you should not get into the race conditions like part (a).

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 20, 2013 9:40 PM PDT)</span> 
	  

	  

	  

	  Working on part B and we have implemented something that gets 30,000 
each time as expected when locking L1 then L2 but we get the same result
 locking L2 then L1.

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 20, 2013 9:41 PM PDT)</span> 
	  

	  

	  

	  Starting to realize that the locks and the shared resources are not 
linked in any manner. Is there a way to set a particular SpinLock to a 
particular resource. Right now incrementing the Shared Resources and 
Locking the 2 SpinLocks are mutually exclusive events I believe

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 11:24 AM PDT)</span> 
	  

	  

	  

	  For the time being, just keep the locks and resources separate. You 
can easily wrap around the lock and its resource in a class. This 
doesn't solve the problem except it hides the details.

	  </li>
    
    
	  <li><span style="color: goldenrod">Jessica Thomas</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 4:27 PM PDT)</span> 
	  

	  

	  

	  PART C QUESTION:

	  </li>
    
    
	  <li><span style="color: goldenrod">Jessica Thomas</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 4:28 PM PDT)</span> 
	  

	  

	  

	  If a thread has voluntarily given up its share of the CPU, does it go to the back or the front of the READY queue?

	  </li>
    
    
	  <li><span style="color: darkgreen">Keiran Reilly</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 4:31 PM PDT)</span> 
	  

	  

	  

	  Jessica, from my understanding, yes

	  </li>
    
    
	  <li><span style="color: darkgreen">Keiran Reilly</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 4:31 PM PDT)</span> 
	  

	  

	  

	  but you might want to get someone who knows this stuff more than me to verify that for you

	  </li>
    
    
	  <li><span style="color: goldenrod">Jessica Thomas</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 4:48 PM PDT)</span> 
	  

	  

	  

	  Thanks for the quick reply! To clarify, what I meant to ask was where does it go: to the back OR to the front?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 5:19 PM PDT)</span> 
	  

	  

	  

	  When a thread is preempted (involuntarily), it should return to the 
front of its level. That is, it should be the first one to resume at the
 same level.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 5:20 PM PDT)</span> 
	  

	  

	  

	  However, if a thread voluntarily gives up its CPU, then it should go to the end of its level.

	  </li>
    
    
	  <li><span style="color: goldenrod">Jessica Thomas</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 21, 2013 6:18 PM PDT)</span> 
	  

	  

	  

	  Thanks!

	  </li>
    
    
	  <li><span style="color: darkviolet">Hiroyuki Takatsuka</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 22, 2013 4:25 PM PDT)</span> 
	  

	  

	  

	  For part (b) we only get something close to 30000 (ie s1 would be 
29992 and s2 29994) is there a possibility for two threads trying to 
lock the same spinlock at the same time, thus causing a race condition? 
if so, how would we avoid it?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 23, 2013 5:18 PM PDT)</span> 
	  

	  

	  

	  Yes, you're right. The implementation of the lock() method in the 
Spinlock class is not atomic. Try changing it with a "synchronized" 
keyword in front of it.

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 24, 2013 1:16 PM PDT)</span> 
	  

	  

	  

	  Anyone having issues printing statements after adding the 'synchronized' keyword to the lock() method in the terminal?

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 2:35 PM PDT)</span> 
	  

	  

	  

	  Part C question -- How does Rose equate the number on the command 
line to the length of a Tick? I'm little confused about how timing is 
implemented as outlined in rose.summary.txt... 

	  </li>
    
    
	  <li><span style="color: peru">Sukhpal Parmar</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 2:50 PM PDT)</span> 
	  

	  

	  

	  The ticks/quantum length are based on your individual computer. I 
don't think you need to know how that works for this assignment. 1 
quantum length is 1 tick, so for Real Time threads, 1 tick would be 
assigned (2 ticks for User level).  After 1 quantum (say 10ms or 
whatever you set it to when you call rose) Rose will automatically call 
VMTick where you decrease the quantum in that active thread by 1, and do
 whatever else is necessary.

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 3:06 PM PDT)</span> 
	  

	  

	  

	  I get that part, but under dispatch() there is a comment that says 
"You will also likely need to add code for keeping track of cpu_time for
 old and new active thread" presumably to track if it's time to call 
VMTick or not...?

	  </li>
    
    
	  <li><span style="color: peru">Sukhpal Parmar</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 3:14 PM PDT)</span> 
	  

	  

	  

	  Oh gotcha, yeah I don't know how to keep track of that.  Until I 
figure that out I'm just going to assume Rose will handle it and maybe 
just start counting a fresh quantum when the active threads are swapped.

	  </li>
    
    
	  <li><span style="color: peru">Sukhpal Parmar</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 3:26 PM PDT)</span> 
	  

	  

	  

	  When you have REAL TIME tasks and USER level tasks, do they timeshare
 together? or does it finish the REAL TIME tasks before going into the 
USER level tasks?

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 3:32 PM PDT)</span> 
	  

	  

	  

	  I think you are right, ROSE calls VMTick on it's own. We just did 
some testing with it. It should finish the REAL TIME ones first, but we 
haven't tested that yet.

	  </li>
    
    
	  <li><span style="color: deeppink">Ernest Fan</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 4:29 PM PDT)</span> 
	  

	  

	  

	  Anyone getting segmentation fault when you run part c?

	  </li>
    
    
	  <li><span style="color: darkgreen">Keiran Reilly</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 4:29 PM PDT)</span> 
	  

	  

	  

	  More importantly, anyone else having none of their code ever called when they run rose.exe for part c?

	  </li>
    
    
	  <li><span style="color: dodgerblue">Brennan McKinney</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 4:46 PM PDT)</span> 
	  

	  

	  

	  Keiran: Try just printing something in the java code you're trying to
 run's main. I'm pretty sure that it's designed to get that up and 
running even without any input from us. If it doesn't, I don't know why 
it wouldn't be.

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 25, 2013 6:14 PM PDT)</span> 
	  

	  

	  

	  @Sukhpal. I figured out that comment about the cpu_time. It's in reference to part D

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 26, 2013 7:15 PM PDT)</span> 
	  

	  

	  

	  @Ernest, if you haven't figured it out, check if you have code written for when your queue is NULL for your methods

	  </li>
    
    
	  <li><span style="color: limegreen">Kyle Johal</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 27, 2013 4:27 PM PDT)</span> 
	  

	  

	  

	  has anyone else had the problem with part D , when you "make" it says it failed because '-u mode unimplemented'

	  </li>
    
    
	  <li><span style="color: rosybrown">Linh Nguyen</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 27, 2013 7:47 PM PDT)</span> 
	  

	  

	  

	  I was wondering if someone could summarize the notes and help given 
in the tutorial last friday about the assignment, I wasn't able to make 
it due to my cousin's father condition and I had to attend the funeral 
on his family's request.

	  </li>
    
    
	  <li><span style="color: rosybrown">Linh Nguyen</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 27, 2013 7:53 PM PDT)</span> 
	  

	  

	  

	  Sorry for all of a sudden dropping this all of a sudden =(

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 28, 2013 2:46 PM PDT)</span> 
	  

	  

	  

	  Friday's tutorial was hints on part (c) of assignment 1 for the most 
part. Dr. Chang drew out the state diagram for a thread and gave a 
description of what each method did.

	  </li>
    
    
	  <li><span style="color: deeppink">Ernest Fan</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 28, 2013 3:24 PM PDT)</span> 
	  

	  

	  

	  @kyle I am getting "jar: `-u' mode unimplemented." too, anyone knows why?

	  </li>
    
    
	  <li><span style="color: rosybrown">Linh Nguyen</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 28, 2013 6:57 PM PDT)</span> 
	  

	  

	  

	  Ok, cool! Thanks Wesley

	  </li>
    
    
	  <li><span style="color: cornflowerblue">Aahan Suneja</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 28, 2013 9:33 PM PDT)</span> 
	  

	  

	  

	  For part c do we need to write the code for yield?

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 28, 2013 11:19 PM PDT)</span> 
	  

	  

	  

	  @Aahan Yes. Yield is the Reschedule method()

	  </li>
    
    
	  <li><span style="color: crimson">Robert Skelly</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 29, 2013 11:06 AM PDT)</span> 
	  

	  

	  

	  @Wesley Chow If you run rose in gdb, you see that an exception is 
thrown in j_vm.c when you add the synchronized keyword. The same thing 
happens using the compiled version in the soln folder. We don't have 
access to j_vm.c and I have no idea why that happens.

	  </li>
    
    
	  <li><span style="color: crimson">Robert Skelly</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 29, 2013 11:07 AM PDT)</span> 
	  

	  

	  

	  @Ernest Fan I have this problem when System.println gets called too often. Doesn't happen when I take it out.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(May 29, 2013 11:25 AM PDT)</span> 
	  

	  

	  

	  ROSE is implementing its own scheduler and interprocess communication
 primitives (e.g., mutex, semaphore, condition variables), which are not
 compatible with standard Java. So, please don't use synchronized 
keyword in the future except part (b) of assignment 1.

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 1:08 PM PDT)</span> 
	  

	  

	  

	  Do we want to generalise part (b) for n consumers/readers (n is positive) or a hard-coded value?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 1:15 PM PDT)</span> 
	  

	  

	  

	  Only for 3 readers. You may hard-code this limit inside the SBuffer class.

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 1:29 PM PDT)</span> 
	  

	  

	  

	  For part b should we use a barrier or do we not need to lock the readers at all?

	  </li>
    
    
	  <li><span style="color: blue">Jesper Rage</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 1:32 PM PDT)</span> 
	  

	  

	  

	  when you say limit consumers, do you mean we can still have 1, 2 ,3 but not 4 readers?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 1:33 PM PDT)</span> 
	  

	  

	  

	  The concept is quite similar to a barrier, but not exactly the same. 
The difference is that the readers must read the same "i"-th element in 
the data stream. A barrier doesn't have this notion.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 1:40 PM PDT)</span> 
	  

	  

	  

	  The 3 readers limit is an easily changeable limit. We can hard-code 
it or we can initialize it in the SBuffer constructor. So, this is not 
really a big problem. Our test code only uses 3.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 1:42 PM PDT)</span> 
	  

	  

	  

	  Some students are confused about what the "i" in StartRead() means. 
Think of a data stream is a sequence of data elements or packets; the 
"i" is the sequence number of the i-th packet.

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 15, 2013 4:52 PM PDT)</span> 
	  

	  

	  

	  For part B, our solution writes an item to the buffer, and then all 
three readers read what has just been written before it writes again. In
 the solution code, the writer is writing faster than the readers are 
reading. Do we need to implement preference for the writer in this 
solution? 

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 16, 2013 11:07 AM PDT)</span> 
	  

	  

	  

	  No. You don't need to follow the sample solution for part b.

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 16, 2013 12:05 PM PDT)</span> 
	  

	  

	  

	  Cool, thanks :).

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 17, 2013 6:35 PM PDT)</span> 
	  

	  

	  

	  For condSignal, I am trying to relock m(which is the mutex that was 
stored by condWait as the value for thr_active-&gt;relock ). My problem 
is that when i call MutexLock on m, i get a cast error because i need a 
mutex_id rather than the mutex itself. is there a method that converts a
 mutex into its ID or should the id of the relocking mutex be stored as a
 part of a threads struct?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 17, 2013 8:57 PM PDT)</span> 
	  

	  

	  

	  Please read the code for "MutexLock". You can remember the mutex ID instead.

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 18, 2013 9:33 PM PDT)</span> 
	  

	  

	  

	  In TestBroadcast.java, thread 'a' doesn't lock the mutex before it calls Broadcast(), is this intended?

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 19, 2013 12:25 AM PDT)</span> 
	  

	  

	  

	  @Wesley. I noticed that too! I don't quite get how that works, 
either. Right now we are getting a Dispatch: Empty runnable queue error 
when A tries to unlock. Because it's not the current owner, not of the 
threads put into the m-&gt;blockq are able to be run :S

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 19, 2013 10:03 AM PDT)</span> 
	  

	  

	  

	  My code produces the expected result if I add a "m.Lock()" after yield() in the 'if statement'

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 19, 2013 12:12 PM PDT)</span> 
	  

	  

	  

	  It is an error if c.Broadcast() is called without locking a mutex 
first. The test code is wrong if it didn't. Because it is NOT 
implementing a Monitor otherwise.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 19, 2013 12:19 PM PDT)</span> 
	  

	  

	  

	  TestBroadcast.Java is wrong! Please check the announcement.

	  </li>
    
    
	  <li><span style="color: turquoise">Ian Brown</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 19, 2013 8:17 PM PDT)</span> 
	  

	  

	  

	  Has any one had an issue when they run their ./rose/rose.exe with 
/soln/TestP1C3.bin it works fine, but with /b/TestP1C3.bin it gets a 
"(Dispath) ERROR empty runnable queue!". Also note /b/TestP1C3.bin works
 fine with /soln/rose.exe

	  </li>
    
    
	  <li><span style="color: turquoise">Ian Brown</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 19, 2013 9:11 PM PDT)</span> 
	  

	  

	  

	  nevermind, figured it out

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 9:24 AM PDT)</span> 
	  

	  

	  

	  Looking at my notes from Wed May 29, why can't a mutex be used for 
one way synchronization between two different processes? Is it because 
of the ownership that's associated with locking/unlocking?

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 10:52 AM PDT)</span> 
	  

	  

	  

	  Can you please confirm whether a thread giving up control due to 
quantum expiration is "voluntary" or "involuntary". There is conflicting
 statements between the lecture notes and the j_thread.c code/Reschedule
 comments, given for assignment 2. Thanks.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 10:59 AM PDT)</span> 
	  

	  

	  

	  Yes, ownership of a mutex is designed to prevent accidental signalling of a lock, which is meant for mutual exclusion only.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 11:00 AM PDT)</span> 
	  

	  

	  

	  when quantum expires, a thread is "forced" to give up its CPU; this is involuntary.

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 1:26 PM PDT)</span> 
	  

	  

	  

	  For the Skier problem solution with a semaphore, it has the following:

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 1:27 PM PDT)</span> 
	  

	  

	  

	  // Take two students from "team"

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 1:28 PM PDT)</span> 
	  

	  

	  

	  team.signal() team.signal(), I am having a hard time with this, isn't
 it "take one Instructor from team, and then team.signal  only once?

	  </li>
    
    
	  <li><span style="color: darkorange">Braydon Justice</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 1:45 PM PDT)</span> 
	  

	  

	  

	  team.signal() is called twice because team.wait() is called once for each student or two times total.

	  </li>
    
    
	  <li><span style="color: darkorange">Braydon Justice</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 1:47 PM PDT)</span> 
	  

	  

	  

	  ie. public void signup() is run twice, (one time per student) causing to instances of team.wait()

	  </li>
    
    
	  <li><span style="color: darkorange">Braydon Justice</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 1:47 PM PDT)</span> 
	  

	  

	  

	  *two instances

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 1:54 PM PDT)</span> 
	  

	  

	  

	  Thanks!

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 24, 2013 9:27 PM PDT)</span> 
	  

	  

	  

	  Will the second test for this course be cumulative or only stuff after the cut off date

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jun 26, 2013 8:44 AM PDT)</span> 
	  

	  

	  

	  The 2nd test will be about the 2nd half of the course only.

	  </li>
    
    
	  <li><span style="color: lightslategray">Sondra Moyls</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 9, 2013 6:13 PM PDT)</span> 
	  

	  

	  

	  I really enjoy that the test code for A3 part A prints out Qapla' when you get it running correctly... lol.

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 14, 2013 3:34 PM PDT)</span> 
	  

	  

	  

	  Where do I find the markers email?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 15, 2013 10:35 AM PDT)</span> 
	  

	  

	  

	  His email is: leiz@uvic.ca

	  </li>
    
    
	  <li><span style="color: blueviolet">Shane Jagdis</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 15, 2013 4:28 PM PDT)</span> 
	  

	  

	  

	  I think the cscan.java test case is the incorrect file. It seems to 
be exactly the same as the sstf.java test, which doesn't really test the
 CSCAN algorithm properly. The solution file for cscan is definitely 
running another test case

	  </li>
    
    
	  <li><span style="color: cornflowerblue">Aahan Suneja</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 15, 2013 8:30 PM PDT)</span> 
	  

	  

	  

	  What's the difference between C-SCAN and C-LOOK?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 15, 2013 8:52 PM PDT)</span> 
	  

	  

	  

	  C-SCAN goes all the way to the last block before returning to the 
beginning. C-LOOK turns around as soon as their no outstanding request 
in the same direction, it then goes back to the beginning.

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 15, 2013 8:53 PM PDT)</span> 
	  

	  

	  

	  As far as the cscan.java test is concerned, its test output will look
 identical to sstf.java. However, if you set TOTAL_REQUESTS = 3, then 
the output will be different.

	  </li>
    
    
	  <li><span style="color: royalblue">Noel Anstey</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 26, 2013 12:28 PM PDT)</span> 
	  

	  

	  

	  is there a tutorial today?

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 26, 2013 1:16 PM PDT)</span> 
	  

	  

	  

	  There should be

	  </li>
    
    
	  <li><span style="color: teal">Elizabeth Clemis</span> 

   	  

  	  

	  
	    <span class="chatDate">(Jul 30, 2013 8:38 PM PDT)</span> 
	  

	  

	  

	  Could someone please tell me if Dr.Cheng covered inverted page 
tables? I don't see anything in my notes, but I did miss a class. Thank 
you.

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 1, 2013 9:54 AM PDT)</span> 
	  

	  

	  

	  I don't recall him covering that, just one level and two level page tables

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 1, 2013 10:34 AM PDT)</span> 
	  

	  

	  

	  Yes, I covered the topic on frame table, which is based on using associative memory; it is kind of inverted page table.

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 3, 2013 5:46 PM PDT)</span> 
	  

	  

	  

	  Hey I'm wondering how people are doing with assignment 4. 

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 3, 2013 5:47 PM PDT)</span> 
	  

	  

	  

	  I am at a point where im contemplating how to implement the cache, I 
cant decide between creating a new class called LFUcacheEntry and making
 an array of these objects that is 16 entries long. Or creating an array
 of diskrequests.

	  </li>
    
    
	  <li><span style="color: firebrick">Logan Masniuk</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 3, 2013 5:47 PM PDT)</span> 
	  

	  

	  

	  the LFUcacheEntries would only hold the block number, a counter and the data associated with the block.

	  </li>
    
    
	  <li><span style="color: brown">Samuel Navarrete</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 5, 2013 8:45 PM PDT)</span> 
	  

	  

	  

	  I think both ways would work. I'm just using a double array of integers as my cache. 

	  </li>
    
    
	  <li><span style="color: magenta">Francis Harrison</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 5, 2013 11:14 PM PDT)</span> 
	  

	  

	  

	  Does the midterm mark include the open question?

	  </li>
    
    
	  <li><span style="color: red">Mantis Cheng</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 7, 2013 1:49 PM PDT)</span> 
	  

	  

	  

	  Yes, I have added the open question (25%) into the test2 (75%).

	  </li>
    
    
	  <li><span style="color: green">Wesley Chow</span> 

   	  

  	  

	  
	    <span class="chatDate">(Aug 8, 2013 9:02 AM PDT)</span> 
	  

	  

	  

	  Thanks for the great course!

	  </li>
    
    
    </ul>

<script type="text/javascript" language="JavaScript">
    //set for the chatscript.js
    deleteMsg = "Delete this message";
    deleteUrl = "/portal/tool/1791c4dd-8f20-4275-8731-fdd22f068fec/sakai.chat.deleteMessage.helper/deleteMessageConfirm?session.current_message=";
    chat2_shownMessages = 98;

    var Colors = [ "red", "blue", "green", "orange", "firebrick", "teal", "goldenrod", "darkgreen", "darkviolet", "lightslategray", "peru", "deeppink", "dodgerblue", "limegreen", "rosybrown", "cornflowerblue", "crimson", "turquoise", "darkorange", "blueviolet", "royalblue", "brown", "magenta", "olive", "saddlebrown", "purple", "coral", "mediumslateblue", "sienna", "mediumturquoise", "hotpink", "lawngreen", "mediumvioletred", "slateblue", "indianred", "slategray", "indigo", "darkcyan", "springgreen", "darkgoldenrod", "steelblue", "darkgray", "orchid", "darksalmon", "lime", "gold", "darkturquoise", "navy", "orangered", "darkkhaki", "darkmagenta", "darkolivegreen", "tomato", "aqua", "darkred", "olivedrab",  ""];
	Colors.pop();

	var numColors = Colors.length;
	var nextColor = 23;

	var ColorMap = new Object();

	ColorMap["3f75bf3b-d3b0-4260-8907-50fea1eb3526"] = "lightslategray";

	ColorMap["18e1202f-7173-40fd-87fd-913c4aff5522"] = "teal";

	ColorMap["e7f87256-d3f4-49fa-ac16-c54a910cb8fc"] = "darkviolet";

	ColorMap["4b247476-1e64-40c2-96b1-d92d45fd4a24"] = "rosybrown";

	ColorMap["3130cb1c-e89a-436a-8506-9327d3aa2791"] = "turquoise";

	ColorMap["d2acefce-4ccb-41d8-bfb6-c3f56cdd6039"] = "firebrick";

	ColorMap["e95f097a-2a23-4e91-bbfd-8a779c5421f4"] = "crimson";

	ColorMap["47a9c807-da00-4773-ab01-4cbe66fcfd25"] = "red";

	ColorMap["b5db24c8-1bc8-4aea-859a-b01aee961069"] = "darkgreen";

	ColorMap["76d21b95-b1ef-4dc7-bcb7-f98b19353722"] = "goldenrod";

	ColorMap["a2531c06-e72a-442e-959e-5cc805042944"] = "royalblue";

	ColorMap["70a23f84-afcf-4d2f-ad28-669df703ebf6"] = "cornflowerblue";

	ColorMap["9f3be786-4013-4a15-83af-7996075d6a70"] = "darkorange";

	ColorMap["9e136008-142b-4653-869b-1b4ed06012f5"] = "deeppink";

	ColorMap["28428f13-711f-49c4-a71d-a9b3f7f73f89"] = "brown";

	ColorMap["837dcd60-b6a5-4ae0-9e2b-bc3417122d2f"] = "blue";

	ColorMap["341cb976-29ea-461c-b53c-202cace524de"] = "peru";

	ColorMap["6bd85831-80eb-451d-8fc6-8de84832d895"] = "magenta";

	ColorMap["72a4f6ad-ace5-4f95-bb28-27ccd42931c7"] = "dodgerblue";

	ColorMap["c69c766b-ea7a-4398-888f-bd1ae5a9bfa9"] = "blueviolet";

	ColorMap["417a82bf-2a1c-414e-9ca5-69e238112023"] = "orange";

	ColorMap["10caabc2-dd5e-46ad-8bbe-2bd7207be709"] = "green";

	ColorMap["2eb6b30e-4bd8-4816-a089-dbe074908bad"] = "limegreen";


    var display_date = true;
    var display_time = true;
    var display_id = false;
    var sound_alert = true;

    var objDiv = document.getElementById("Monitor");
   	objDiv.scrollTop = objDiv.scrollHeight;
</script>

				</div>
			</div>	
			<div id="chatPresenceWrapper">			
				<div class="chatListHeadWrapper">
					Users in Chat
				</div>
				<iframe name="Presence" id="Presence" title="List of users present in room" marginwidth="0" marginheight="0" class="wcwmenu" src="1791c4dd-8f20-4275-8731-fdd22f068fec_data/roomUsers.htm" align="right" frameborder="0" scrolling="no" width="100%">
				</iframe>
			</div>
		<input name="topForm" value="topForm" type="hidden"></form>
		
		<div>
		    <label for="controlPanel:message" style="clear:both;display:block;">
Enter chat message</label>
            <div id="errorSubmit" class="alertMessage" style="display:none">
                There was a problem sending the prior message.
            </div>
			<textarea id="controlPanel:message" name="controlPanel:message" cols="60" rows="3"></textarea>
			<p class="act">
	          <input id="controlPanel:submit" name="controlPanel:submit" value="Add message" class="active" type="button">
	          <input id="controlPanel:reset" name="controlPanel:reset" value="Clear" type="button">
	     	</p>
	    </div>
		
	<p style="clear:both;display:block;"></p>
			
	<script type="text/javascript" language="JavaScript">
		setMainFrameHeight('Main1791c4ddx8f20x4275x8731xfdd22f068fec');
	</script>

<!--  We can't use the sakai:courier tag because it works from the tool placement id...  and this is now specific to presence in the room  -->
<script type="text/javascript" language="JavaScript">
updateTime = 10000;
updateUrl = "/courier/2495b0b7-82a1-423d-af24-852ef608bba9/chat_site_56ea8ff6-127b-4c7e-aeb0-f1617998af8a?userId=10caabc2-dd5e-46ad-8bbe-2bd7207be709";
scheduleUpdate();
</script>
   </div>

</body></html>